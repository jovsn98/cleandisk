<#
.SYNOPSIS
   Permet de Supprimer ou Compresser les fichiers inutiles sur les lecteurs C: des serveurs

.DESCRIPTION
    # Créé par CHEOPS TECHNOLOGY
    v1.00 - Thierry MILLE : Initialisation du script
    v1.01 - Thierry MILLE : Ajout compression des journaux de performance
    v1.20 - Jérôme MICHAUD : Ajout gestion des erreurs et indication des volumetries
    v1.21 - Thierry MILLE : Ajout compression C:\Windows\System32\LogFiles et C:\Windows\Debug
    v1.22 - Jérôme MICHAUD : Ajout des traitements en cours dans la console
    v1.23 - Jérôme MICHAUD : Ajout des répertoires INETCache dans System32 et SysWOW64
    v1.24 - Jérôme MICHAUD : Modification du fichier cookie "C:\CHEOPS\cookie_cleandisk-eventhandler.running"
    v1.25 - Jérôme MICHAUD : Séparation du dossier temporaire WinTemp pour eviter le blocage (Avant blocage du script si présence du script LM.detect.XXXXX.vbs)
    v1.30 - Jérôme MICHAUD : Correction des bugs de suppression IIS (Remove-item sans filtrage de date)
    v1.31 - Jérôme MICHAUD : Ajout du paramètre par défault
    v1.32 - Jérôme MICHAUD : Correction du bug de compression de logs + Ajout de version

Grandes phases du script :
    => Création d'un fichier cookie pour éviter que plusieurs scripts soient démarrés simultanément sur un même serveur
    => Compression des fichiers de logs Perflogs, Debug, LogFiles, IIS, Exchange (prise en charge des versions 2010 à 2019)
    => Suppression des fichiers stockés à des emplacements connus et réputés comme sans risque
    => Suppression des fichiers journaux IIS avec gestion des exceptions par nom d'ordinateur (adaptable)
    => Suppression du dossier SoftwareDistribution
    => Suppression du fichier cookie
    => ...

Codes présent dans l'eventlog lors du passage du script :
    62020 => Indication de l'espace avant début du script
    62021 => Espace requis permettant d'éviter la suppression
    62022 => Espace requis défini par défaut sur 5 Go
    62023 => Script déjà en cours d'exécution (Cookie présent)
    62024 => Nom des fichiers en cours de compression
    62025 => Arret du script de nettoyage car limite définie atteinte
    62026 => Nom des fichiers en cours de suppression
    62027 => Indication de l'espace après phase de suppression du script
    62028 => Suppression du cookie
    62029 => Indication de l'espace après passage du script


Tips : Pour fixer la taille d'espace disque minimale au lancement du script par exemple 10Go dans la ligne ci-dessous :
Clean_Disk.ps1 -SIZE_REQUIRE_VALUE 10
#>

Param (
    [string]$SIZE_REQUIRE_VALUE=15
    )

### Suppression des entrees affichees sur l'ecran [DEBUG]
Clear-Host
    
### Mettre sous silence les erreurs
$ErrorActionPreference = "SilentlyContinue" 

#Conversion de la date pour la journalisation
$Version = "v1.32"
$datestring=Get-Date -Format "MM-dd-yyyy_hh-mm-ss"

#######################################################
#########  Création des journaux d'évènements #########
#######################################################
Try {
    New-EventLog -source "Action Cheops System" -LogName "System" -ErrorAction Stop
    New-EventLog -source "Action Cheops Application" -LogName "Application" -ErrorAction Stop
}
Catch {
    Write-Host -For Yellow "Les sources Cheops System et Application sont déjà présentes"
}

#######################################################
#############  Calcul de l'espace requis ##############
#######################################################
if ($SIZE_REQUIRE_VALUE -ne "15") {
    $SPACE_REQUIRE = $SIZE_REQUIRE_VALUE
    Write-Host "L'espace requis du script se basera sur $SPACE_REQUIRE Go"
    Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62021 -EntryType Warning -Message "L'espace requis du script ce basera sur $SPACE_REQUIRE Go"
}
Else {
    $SPACE_REQUIRE = "15"
    Write-Host -For Yellow "L'espace requis du script se basera sur 15Go (Valeur non précisée au lancement)"
    Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62022 -EntryType Warning -Message "L'espace requis du script se basera sur 15Go (Valeur non précisée au lancement)"
}

########################################################
##  Création cookie pour éviter l'exécution parallèle ##
########################################################
$CookiePath = "C:\CHEOPS\cookie_cleandisk-eventhandler.running"

#$ParallelCookie = Test-Path $CookiePath
If ((Test-Path $CookiePath) -eq $false) {
   New-Item -ItemType File $CookiePath | Out-Null
   Set-Content $CookiePath "Fichier cree le par le script EventHandler de la supervision CHEOPS : $datestring"
    }
else {
    Write-Host -For Yellow "Le script est déjà en cours d'exécution"
    Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62023 -EntryType Warning -Message "Le script est déjà en cours d'exécution"
    Exit;
}

########################################################
#####  Vérification de l'état de l'espace disque   #####
########################################################

#Fonction de vérification d'espace disque
function FC_CHECK_DISK ([string]$CHECK) {
    $DISK_REQ = Get-WmiObject Win32_LogicalDisk | Where-Object {$_.DeviceID -like "C:"}
    $FREESIZE_REQ = $DISK_REQ.freespace / (1024*1024*1024)
    $FREESIZE_ARROUND = [math]::round($FREESIZE_REQ, 0)
    $FREESIZE = [math]::round($FREESIZE_REQ, 1)
    if ($CHECK -eq "ARROUND"){
        return $FREESIZE_ARROUND;
    }
    if ($CHECK -eq "ENTIER"){
        return $FREESIZE;
    }
}

#Vérification de l'espace disque restant avant lancement du script
$FREESIZE_DEBUT = FC_CHECK_DISK("ENTIER");
Write-Host "L'espace disponible est de $FREESIZE_DEBUT Go avant passage du script"
Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62020 -EntryType Information -Message "L'espace disponible est de $FREESIZE_DEBUT Go avant passage du script (Version: $Version)"

########################################################
#######  Emplacement des fichiers à compresser   #######
########################################################
#Dossier CHEOPS
If ((Test-Path "C:\CHEOPS\") -eq $True) {
    $CHEOPSFolderPath = "C:\CHEOPS\"
}

#Dossiers journaux Sytem32\LogFiles (NPS, WMI, etc.)
If ((Test-Path "C:\Windows\System32\LogFiles\") -eq $True) {
    $System32LogFiles = "C:\Windows\System32\LogFiles\"
}

#Dossiers journaux Sytem32\LogFiles (NPS, WMI, etc.)
If ((Test-Path "C:\Windows\Debug\") -eq $True) {
    $WindowsDebugLogFiles = "C:\Windows\Debug\"
}

#Compteurs de performances
If ((Test-Path "C:\Perflogs\") -eq $True) {
    $Perflogs = "C:\Perflogs\"
}

#LogsIIS
If ((Test-Path "C:\inetpub\logs\LogFiles\") -eq $True) {
    $LogIISPath = "C:\inetpub\logs\LogFiles\"
}

#Logs Exchange
If ((Test-Path "C:\Program Files\Microsoft\Exchange Server\V14\Logging\") -eq $True) {
     $ExchangeLogFolders = "C:\Program Files\Microsoft\Exchange Server\V14\Logging\"
}
If ((Test-Path "C:\Program Files\Microsoft\Exchange Server\V15\Logging\") -eq $True) {
     $ExchangeLogFolders = "C:\Program Files\Microsoft\Exchange Server\V15\Logging\"
}

#Emplacements à compresser
$FoldersOfFilesToCompress = ($CHEOPSFolderPath, $System32LogFiles, $WindowsDebugLogFiles, $Perflogs, $LogIISPath, $ExchangeLogFolders)

#Age des fichiers minimum pour compression
$MinAgeOfFilesToCompress = (Get-Date).AddDays(-2)

#Suppression des fichiers journaux du script de plus de 120 jours
$ScriptLogsOlder120days = Get-ChildItem C:\CHEOPS\CleanDiskEventHandler\ -Include *.log -Recurse 2> $null | Where-Object {$_.name -like "oc*" -and $_.LastWriteTime -lt ((get-date).AddDays(-120))}
$ScriptLogsOlder120days | Remove-Item 2> $null

#Recherche des fichiers dans les dossiers contenant des fichiers pour compression NTFS
foreach ($FolderToCompress in $FoldersOfFilesToCompress) {
     $AllFiles = Get-ChildItem $FolderToCompress -Recurse -Include *.txt, *.log, *.blg 2> $null | where-object {($_.LastWriteTime -le $MinAgeOfFilesToCompress) -AND ($_.Attributes -notlike "*Compressed*")}
     ForEach ($UniqueFile in $AllFiles) {
        $File_Name_Compress = $UniqueFile
        Write-host "Le fichier [$File_Name_Compress] est en train d'être compressé"
        Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62024 -EntryType Information -Message "Le fichier [$File_Name_Compress] est en train d'être compressé"
        Compact /C "$File_Name_Compress" 2>&1 | Out-Null;
     }
}

#Vérification de l'espace disque restant après compression
$FREESIZE_ARROUND = FC_CHECK_DISK("ARROUND");
$FREESIZE_FIN = $FREESIZE_AF_COMPRESS = FC_CHECK_DISK("ENTIER");
If ($FREESIZE_ARROUND -gt $SPACE_REQUIRE) {
    Write-Host "L'espace disponible est de $FREESIZE_AF_COMPRESS Go"
    Write-Host -For Green "Le script va s'arreter car la limite de nettoyage est atteinte - Limite $SPACE_REQUIRE Go"
    Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62025 -EntryType Information -Message "L'espace disponible est de $FREESIZE_AF_COMPRESS Go - Le script va s'arreter car la limite de nettoyage est atteinte - Limite $SPACE_REQUIRE Go"
}
Else {
    ######################################################
    ############## Suppression des fichiers ##############
    ######################################################
    Write-Host -For Yellow "La phase de compression est insuffisante"
    Write-Host -For Yellow "Le script va passer à la phase suppression"

    #Création dossier CleanDiskEventHandler s'il n'existe pas
    If ((Test-Path "C:\CHEOPS\CleanDiskEventHandler\") -eq $false) {
        New-Item -ItemType Directory c:\CHEOPS\CleanDiskEventHandler\
    }

    #Fichiers qui stockent le rapport des fichiers présents avant tentative suppression et après suppression
    $FilesBeforeSuppress = "C:\CHEOPS\CleanDiskEventHandler\disk_c_log_avant_suppression_$datestring.txt"
    $FilesAfterSuppress = "C:\CHEOPS\CleanDiskEventHandler\disk_c_log_apres_suppression_$datestring.txt"

    #Verification de la présences des repertoires a purger
    If ((Test-Path 'C:\$Recycle.Bin\') -eq $True) {
        $RecycleBin_Path = 'C:\$Recycle.Bin\'
    }
    If ((Test-Path 'C:\temp\') -eq $True) {
        $Temp_Path = 'C:\temp\'
    }
    If ((Test-Path 'C:\Windows\Temp\') -eq $True) {
        $WinTemp_Path = 'C:\Windows\Temp\'
    }
    If ((Test-Path 'C:\ProgramData\Microsoft\Windows\WER\ReportQueue\') -eq $True) {
        $ReportQueue_ProgramData_Path = 'C:\ProgramData\Microsoft\Windows\WER\ReportQueue\'
    }
    If ((Test-Path 'C:\Users\All Users\Microsoft\Windows\WER\ReportQueue\') -eq $True) {
        $ReportQueue_AllUsers_Path = 'C:\Users\All Users\Microsoft\Windows\WER\ReportQueue\'
    }
    If ((Test-Path 'C:\Windows\SoftwareDistribution\Download\') -eq $True) {
        $SoftwareDistribution_Path = 'C:\Windows\SoftwareDistribution\Download\'
    }
    ########################## Debut : Phase de test

    If ((Test-Path 'C:\users\*\AppData\Local\Temp\') -eq $True) {
        $AppDataTemp_Path = 'C:\users\*\AppData\Local\Temp\'
    }
    If ((Test-Path 'C:\users\*\AppData\Local\Microsoft\Windows\Temporary Internet Files\') -eq $True) {
        $AppDataTemporaryCache_Path = 'C:\users\*\AppData\Local\Microsoft\Windows\Temporary Internet Files\'
    }
    If ((Test-Path 'C:\Windows\SysWOW64\config\systemprofile\AppData\Local\Microsoft\Windows\INetCache\IE\') -eq $True) {
        $WindowsCacheSYS64_Path = 'C:\Windows\SysWOW64\config\systemprofile\AppData\Local\Microsoft\Windows\INetCache\IE\'
    }
    If ((Test-Path 'C:\Windows\System32\config\systemprofile\AppData\Local\Microsoft\Windows\INetCache\IE\') -eq $True) {
        $WindowsCacheSYS32_Path = 'C:\Windows\System32\config\systemprofile\AppData\Local\Microsoft\Windows\INetCache\IE\'
    }

    $FoldersOfFilesToRemove = ($RecycleBin_Path, $Temp_Path, $ReportQueue_ProgramData_Path, $ReportQueue_AllUsers_Path, $SoftwareDistribution_Path)
    $FoldersINETOfFilesToRemove = ($AppDataTemp_Path, $AppDataTemporaryCache_Path, $WindowsCacheSYS64_Path, $WindowsCacheSYS32_Path)
    $FoldersOfFilesToRemoveFULL = ($FoldersOfFilesToRemove,$FoldersINETOfFilesToRemove)

    ########################## Fin : Phase de test

    #Récupération de la liste des fichiers dans les emplacements type avant suppression
    #Get-ChildItem 'C:\$Recycle.Bin\*','C:\temp\*','C:\Windows\Temp\*','C:\ProgramData\Microsoft\Windows\WER\ReportQueue\*','C:\Users\All Users\Microsoft\Windows\WER\ReportQueue\*','C:\Windows\SoftwareDistribution\Download\*' -recurse -force 2> $null | Out-File -filepath $FilesBeforeSuppress
    foreach ($FolderToRemoveFULL in $FoldersOfFilesToRemoveFULL) {
        if (($FolderToRemoveFULL -like $null) -eq $False ){
            #Write-host "Avant la purge | Le dossier [$FolderToRemoveFULL] est en train d'être listé"
            Get-ChildItem $FolderToRemoveFULL -recurse -force 2> $null | Out-File -filepath $FilesBeforeSuppress
        }
    }

    #Suppression WinTemp
    Write-host "Le dossier [$WinTemp_Path] est en train d'être purgé"
    Get-ChildItem $WinTemp_Path -Recurse -Force -Exclude "*.vbs" 2> $null | Remove-Item -Recurse -Force 2> $null

    #Suppression des fichiers aux emplacements type
    foreach ($FolderToRemove in $FoldersOfFilesToRemove) {
        if (($FolderToRemove -like $null) -eq $False ){
            Write-host "Le dossier [$FolderToRemove] est en train d'être purgé"
            Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62026 -EntryType Information -Message "Le dossier [$FolderToRemove] est en train d'être purgé"
            Remove-Item $FolderToRemove -Recurse -Force 2> $null
        }
    }
    #Suppression des fichiers logs INETCache
    foreach ($FolderINETToRemove in $FoldersINETOfFilesToRemove) {
        if (($FolderINETToRemove -like $null) -eq $False ){
            Write-host "Le dossier [$FolderINETToRemove] est en train d'être purgé"
            Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62026 -EntryType Information -Message "Le dossier [$FolderINETToRemove] est en train d'être purgé"
            Get-ChildItem $FolderToCompress -Recurse $FolderINETToRemove 2> $null | where-object {$_.LastWriteTime -lt ((get-date).AddDays(-2))} | Remove-Item -Force 2> $null
        }
    }

    #Récupération de la liste des fichiers dans les emplacements type après suppression
    #Get-ChildItem 'C:\$Recycle.Bin\*','C:\temp\*','C:\Windows\Temp\*','C:\ProgramData\Microsoft\Windows\WER\ReportQueue\*','C:\Users\All Users\Microsoft\Windows\WER\ReportQueue\*','C:\Windows\SoftwareDistribution\Download\*' -recurse -force 2> $null | Out-File -filepath $FilesAfterSuppress
    foreach ($FolderToRemoveFULL in $FoldersOfFilesToRemoveFULL) {
        if (($FolderToRemoveFULL -like $null) -eq $False ){
            #Write-host "Après la purge | Le dossier [$FolderToRemoveFULL] est en train d'être listé"
            Get-ChildItem $FolderToRemoveFULL -recurse -force 2> $null | Out-File -filepath $FilesAfterSuppress
        }
    }

    #Purge des fichiers IIS de plus de 365 jours sauf exceptions
    $IISRotateLogs = 365
    $computername = $env:COMPUTERNAME
    #Recherche des ordinateurs comportant certaines chaines de caractères
    If ($computername -like "P-*") {
        $IISRotateLogs = 365
    }

    $IISFilesBeforeSuppress = "C:\CHEOPS\CleanDiskEventHandler\disk_c_IIS_log_avant_suppression_$datestring.txt"
    $LogIISFiles = Get-ChildItem C:\inetpub\logs\LogFiles\ -Include *.log -Recurse 2> $null | Where-Object {$_.name -like "u_*" -and $_.LastWriteTime -lt ((get-date).AddDays(-$IISRotateLogs))}
    $LogIISFiles | Out-File -filepath $IISFilesBeforeSuppress
    $LogIISFiles | Remove-Item -Force 2> $null

    #Suppression des fichier Windows Update en tenant compte de l'état du service
    If ((Get-service wuauserv).status -eq 'Stopped') {
        Remove-Item $env:WINDIR\SoftwareDistribution -Recurse 2> $null
        }
    else {
        Stop-Service wuauserv
        Remove-Item $env:WINDIR\SoftwareDistribution -Recurse 2> $null
        Start-Service wuauserv
    }

    #Vérification de l'espace disque restant aprés suppression compression
    $FREESIZE_FIN = $FREESIZE_AF_SUPRESS = FC_CHECK_DISK("ENTIER");
    Write-Host "L'espace disponible est de $FREESIZE_AF_SUPRESS Go après passage du script"
    Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62027 -EntryType Information -Message "L'espace disponible est de $FREESIZE_AF_SUPRESS Go après passage du script"
}

########################################################
# Suppression cookie pour éviter l'exécution parallèle #
########################################################
Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62028 -EntryType Information -Message "Suppression du cookie"
Remove-Item $CookiePath
$SIZE_REQUIRE_VALUE = $SPACE_REQUIRE = $NULL

########################################################
########### Notification du passage de script ##########
########################################################
$FREESIZE_SCRIPT_REQ = $FREESIZE_FIN - $FREESIZE_DEBUT
$FREESIZE_SCRIPT = [math]::round($FREESIZE_SCRIPT_REQ, 1)
Write-Host -For Green "Le script de nettoyage a récupéré $FREESIZE_SCRIPT Go sur le serveur $env:COMPUTERNAME"
Write-EventLog -LogName "Application" -Source "Action Cheops Application" -EventID 62029 -EntryType Information -Message "Le script de nettoyage a récupéré $FREESIZE_SCRIPT Go sur le serveur $env:COMPUTERNAME"
